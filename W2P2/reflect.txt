/*
Full Name: Sunchit Singh
Email    : sunchit-singh@myseneca.ca
StudentID: 169146214
Date     : September 24, 2022
*/

This workshop broadened my understanding of the topic of dynamic allocation and
deallocation. I found this workshop easier than the first one. I was able to quickly proceed
through the functions, but there were a few things which kept me scratching my
head. In order to successfully display the records and then deallocate them, I
needed the total number of records, but I could not use the noOfRecords() function
because the display() and deallocateMemory() functions do not have access to
the file. Initially I hard-coded the value inorder to move on with the workshop.
I wanted to somewhat globalize the total number of records so that I could
use it in the display and deallocate functions. So I created a global variable 
inside the Populations.cpp file to store the total number of records, and
incremented it with every successful read.

int actualReads = 0;

A snippet from my code - 

records = noOfRecords();
         PCpop = new PCpopulation[records];

         for (int i = 0; i < records && check; i++) {
            if (readFile(PCpop[i], filename)) {
               actualReads++;
               check = true;
            }
            else {
               check = false;
            }
         }

Then, while checking the feedback on matrix, it kept showing that there were
memory leaks, I rechecked the deallocations, which seemed to be absolutely 
correct. Later, I realised that I had forgot to add the fclose function, and 
thus solved the issue with it.
